### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AggregateLibro {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  token: String
  user: User
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Libro {
  autor: String
  createdAt: DateTime!
  descripcion: String
  edicion: String
  editorial: String
  fecha_publicado: Int
  id: ID!
  imagen: String
  link: String
  titulo: String!
  tomo: String
  updatedAt: DateTime!
}

type LibroConnection {
  aggregate: AggregateLibro!
  edges: [LibroEdge!]!
  pageInfo: PageInfo!
}

input LibroCreateInput {
  autor: String
  descripcion: String
  edicion: String
  editorial: String
  fecha_publicado: Int
  id: ID
  imagen: String
  link: String
  titulo: String!
  tomo: String
}

type LibroEdge {
  cursor: String!
  node: Libro!
}

enum LibroOrderByInput {
  autor_ASC
  autor_DESC
  createdAt_ASC
  createdAt_DESC
  descripcion_ASC
  descripcion_DESC
  edicion_ASC
  edicion_DESC
  editorial_ASC
  editorial_DESC
  fecha_publicado_ASC
  fecha_publicado_DESC
  id_ASC
  id_DESC
  imagen_ASC
  imagen_DESC
  link_ASC
  link_DESC
  titulo_ASC
  titulo_DESC
  tomo_ASC
  tomo_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input LibroUpdateInput {
  autor: String
  descripcion: String
  edicion: String
  editorial: String
  fecha_publicado: Int
  imagen: String
  link: String
  titulo: String
  tomo: String
}

input LibroUpdateManyMutationInput {
  autor: String
  descripcion: String
  edicion: String
  editorial: String
  fecha_publicado: Int
  imagen: String
  link: String
  titulo: String
  tomo: String
}

input LibroWhereInput {
  AND: [LibroWhereInput!]
  autor: String
  autor_contains: String
  autor_ends_with: String
  autor_gt: String
  autor_gte: String
  autor_in: [String!]
  autor_lt: String
  autor_lte: String
  autor_not: String
  autor_not_contains: String
  autor_not_ends_with: String
  autor_not_in: [String!]
  autor_not_starts_with: String
  autor_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  descripcion: String
  descripcion_contains: String
  descripcion_ends_with: String
  descripcion_gt: String
  descripcion_gte: String
  descripcion_in: [String!]
  descripcion_lt: String
  descripcion_lte: String
  descripcion_not: String
  descripcion_not_contains: String
  descripcion_not_ends_with: String
  descripcion_not_in: [String!]
  descripcion_not_starts_with: String
  descripcion_starts_with: String
  edicion: String
  edicion_contains: String
  edicion_ends_with: String
  edicion_gt: String
  edicion_gte: String
  edicion_in: [String!]
  edicion_lt: String
  edicion_lte: String
  edicion_not: String
  edicion_not_contains: String
  edicion_not_ends_with: String
  edicion_not_in: [String!]
  edicion_not_starts_with: String
  edicion_starts_with: String
  editorial: String
  editorial_contains: String
  editorial_ends_with: String
  editorial_gt: String
  editorial_gte: String
  editorial_in: [String!]
  editorial_lt: String
  editorial_lte: String
  editorial_not: String
  editorial_not_contains: String
  editorial_not_ends_with: String
  editorial_not_in: [String!]
  editorial_not_starts_with: String
  editorial_starts_with: String
  fecha_publicado: Int
  fecha_publicado_gt: Int
  fecha_publicado_gte: Int
  fecha_publicado_in: [Int!]
  fecha_publicado_lt: Int
  fecha_publicado_lte: Int
  fecha_publicado_not: Int
  fecha_publicado_not_in: [Int!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  imagen: String
  imagen_contains: String
  imagen_ends_with: String
  imagen_gt: String
  imagen_gte: String
  imagen_in: [String!]
  imagen_lt: String
  imagen_lte: String
  imagen_not: String
  imagen_not_contains: String
  imagen_not_ends_with: String
  imagen_not_in: [String!]
  imagen_not_starts_with: String
  imagen_starts_with: String
  link: String
  link_contains: String
  link_ends_with: String
  link_gt: String
  link_gte: String
  link_in: [String!]
  link_lt: String
  link_lte: String
  link_not: String
  link_not_contains: String
  link_not_ends_with: String
  link_not_in: [String!]
  link_not_starts_with: String
  link_starts_with: String
  NOT: [LibroWhereInput!]
  OR: [LibroWhereInput!]
  titulo: String
  titulo_contains: String
  titulo_ends_with: String
  titulo_gt: String
  titulo_gte: String
  titulo_in: [String!]
  titulo_lt: String
  titulo_lte: String
  titulo_not: String
  titulo_not_contains: String
  titulo_not_ends_with: String
  titulo_not_in: [String!]
  titulo_not_starts_with: String
  titulo_starts_with: String
  tomo: String
  tomo_contains: String
  tomo_ends_with: String
  tomo_gt: String
  tomo_gte: String
  tomo_in: [String!]
  tomo_lt: String
  tomo_lte: String
  tomo_not: String
  tomo_not_contains: String
  tomo_not_ends_with: String
  tomo_not_in: [String!]
  tomo_not_starts_with: String
  tomo_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input LibroWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLibro(data: LibroCreateInput!): Libro!
  createUser(data: UserCreateInput!): User!
  deleteLibro(where: LibroWhereUniqueInput!): Libro
  deleteManyLibroes(where: LibroWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteUser(where: UserWhereUniqueInput!): User
  editRol(id: ID, role: String): User
  login(email: String, password: String): AuthPayload
  signup(email: String, name: String, password: String): AuthPayload
  updateLibro(data: LibroUpdateInput!, where: LibroWhereUniqueInput!): Libro
  updateManyLibroes(data: LibroUpdateManyMutationInput!, where: LibroWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertLibro(create: LibroCreateInput!, update: LibroUpdateInput!, where: LibroWhereUniqueInput!): Libro!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  libro(where: LibroWhereUniqueInput!): Libro
  libroes(after: String, before: String, first: Int, last: Int, orderBy: LibroOrderByInput, skip: Int, where: LibroWhereInput): [Libro!]!
  libroesConnection(after: String, before: String, first: Int, last: Int, orderBy: LibroOrderByInput, skip: Int, where: LibroWhereInput): LibroConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

enum RoleFormat {
  ADMIN
  EDITOR
  LECTOR
}

type User {
  email: String!
  id: ID!
  name: String
  role: RoleFormat
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  email: String!
  id: ID
  name: String
  password: String!
  role: RoleFormat
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  role: RoleFormat
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  role: RoleFormat
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  role: RoleFormat
  role_in: [RoleFormat!]
  role_not: RoleFormat
  role_not_in: [RoleFormat!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
